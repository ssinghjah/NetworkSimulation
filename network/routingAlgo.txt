Link State Routing Algo:
Reference : https://en.wikipedia.org/wiki/Link-state_routing_protocol

Cost of Links
1. Each link has a cost - distance and packet error rate.
2. Each node knows the cost of the links connected to it.

Neighbour Discovery
1. Each node keeps sending "Hello" messages on all of the links to which it is connected. 
   This message includes the node's address.
2. Other nodes on the same link reply to the "Hello" message with their own address.
3. Thus, each node will come to know the address of its neighbouring nodes
4. If the node does not receive a response, it assumes that link is broken.

Link State Advertisement :
1. Each node floods it neighbouring nodes with the cost of the links and the nodes to which it is connected.
2. Each neighbouring node, in turn forwards this information again to its neighbours.
3. In this way, each node receives information about the whole topology.

Route Selection:
1. Once each node gets the information about the whole topology, it builds 2 least cost path - one to minimize distance and 
   another to minimize packet loss.
2. Each end terminal can choose to minimize either propagation delay (e.g. real time VoIP calls need to minimize delay and are ok with packet loss )
   or packet loss ( e.g. FTP cannot tolerate packet loss as the file will get corrupted. Some delay is accepted).
3. The approproate route will be chosen.

Cases:
1. Link failure - Link failure is detected by the "Hello" messages. The node will advertise this link failure and after some time, all nodes will 
   get to know about the failure. The routes will be updated accordingly.
2. Change in link Cost - The change in link cost will be advertised and routes will be updated. 

Congestion and Queues :
1. Each router has a queue of finite length that will buffer packets in case of congestion.
2. If the buffer is full and the number of packets dropped exceed a configurable value, the router will request the sender to change the path.

Priority:
1. When many packets are present in the router's buffer, the highest priority will be served first. 
   E.g. One end terminal may use the network to play Counter Strike over the LAN. Another end terminal may use it to serve Indian Railway Ticket reservation requests. In case of congestion, the second terminal will be given priority.

Inputs from User :
1. User will give the cost of each link - distance and packet error rate.
2. User can fail a link at a time instant "t", where t is less than the simulation duration. The routes will be recalculated.
3. User can change the cost of a link at time instant "t", where t is less than the simulation duration. The routes will be recalculated.
4. The user can change the processing delay at each node and the size of buffer within the router. 
   Larger buffers will minimize packet loss but increase end to end delay.
5. User can decide the application type at each end terminal.

Statistics to Measure & Display :
1. Number of Packets dropped due to buffer overflow at each router.
2. Number of Packets in error due to the link. 
3. Variation in the Path of packets with time due to link failure or change in costs. This will illustrate dynamic routing. 
   We will calculate the number of packets flowing across each link for intervals of say t seconds. 
   E.g. Number of packets through link A from t = 0.1 to 0.2 sec, from 0.2 to 0.3 sec, etc.  
   A heat map will show the above info - shades of red for higher number of packets and shades of blue for lower.
4. Packets delivered per end terminal - already implemented.
5. Packets delivered per application - Higher priority applications should have a higher value.


